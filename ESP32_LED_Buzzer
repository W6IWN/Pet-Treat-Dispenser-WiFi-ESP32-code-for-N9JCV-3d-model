// ESP32 code by W6IWN for the Pet Feeder Treat Dispenser Web App Enabled by N9JCV https://www.thingiverse.com/thing:4735235

#define BLYNK_PRINT Serial
#define BLYNK_TEMPLATE_ID "YOUR_TEMPLATE_ID_HERE"
#define BLYNK_TEMPLATE_NAME "YOUR_TEMPLATE_NAME_HERE"
#define BLYNK_AUTH_TOKEN "YOUR_AUTH_TOKEN_HERE"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <AccelStepper.h>

// Blynk authentication
char auth[] = "YOUR_AUTH_TOKEN_HERE";
char ssid[] = "YOUR WIFI NAME HERE";
char pass[] = "YOUR WIFI PASSWORD HERE";

// Define ULN2003 stepper motor connections
#define IN1 26  // GPIO26 -> ULN2003 IN1
#define IN2 27  // GPIO27 -> ULN2003 IN2
#define IN3 14  // GPIO14 -> ULN2003 IN3
#define IN4 12  // GPIO12 -> ULN2003 IN4

// Define buzzer and LED
#define BUZZER_PIN 25  // GPIO25 -> KY-006 Buzzer
#define LED_PIN 13     // GPIO13 -> LED

#define STEPS_PER_REV 2048  // Steps per revolution for 28BYJ-48 motor
#define COMPARTMENTS 8
#define STEPS_PER_COMPARTMENT (STEPS_PER_REV / COMPARTMENTS)

AccelStepper stepper(AccelStepper::HALF4WIRE, IN1, IN3, IN2, IN4);

bool moving = false;  // Track motor movement
unsigned long startTime = 0;
bool playingMelody = false;

void playMelody() {
    int melody[] = {262, 294, 330, 349, 392, 440, 494, 523}; // Happy melody notes
    int noteDurations[] = {300, 300, 300, 300, 300, 300, 300, 300};
    
    for (int i = 0; i < 8; i++) {
        tone(BUZZER_PIN, melody[i], noteDurations[i]);
        delay(noteDurations[i] * 1.3);
    }
}

BLYNK_WRITE(V1) {
    if (param.asInt() && !moving) {  // If button is pressed and motor is idle
        stepper.move(2 * STEPS_PER_COMPARTMENT);
        moving = true;
    }
}

void setup() {
    Serial.begin(115200);
    
    // Connect to WiFi
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi");

    Blynk.config(auth);
    Blynk.connect();
    
    stepper.setMaxSpeed(1000);
    stepper.setAcceleration(500);
    
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(LED_PIN, OUTPUT);
}

void loop() {
    Blynk.run();
    
    if (moving) {
        stepper.run();
        if (stepper.distanceToGo() == 0) {
            moving = false;
            digitalWrite(LED_PIN, HIGH); // Turn LED on after motor moves
            startTime = millis();
            playingMelody = true;
            Blynk.logEvent("treat_dispensed");  // Send notification
        }
    }
    
    if (playingMelody) {
        playMelody();
    }
    
    if (millis() - startTime >= 5000 && playingMelody) {
        noTone(BUZZER_PIN);
        digitalWrite(LED_PIN, LOW); // Turn LED off after 5 seconds
        playingMelody = false;
    }
}
